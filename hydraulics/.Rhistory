data<-here("EFM_Summer2022.xlsx")
library(here)
library(outliers)
data<-here("EFM_Summer2022.xlsx")
bin<-0.5 #0.5 MPa Psi_leaf bins
head(data)
?readxl
data<-readxl::read_excel(here("EFM_Summer2022.xlsx"),
sheet = "OSBS_EFM")
####Outlier test for vulnerability curve data
# Setup -------------------------------------------------------------------
library(here)
library(tidyverse)
library(outliers)
##functions##
#function creating list of subsetted dataframes
s_create<-function(dataframe){#make sure you set the spns
spns<-unique(dataframe$spcode)#create list of species codes to filter by
subsets<-lapply(spns, function(s) filter(dataframe, spcode==s))#create list of subset dataframes for each species
}
# DataInput ---------------------------------------------------------------
data<-readxl::read_excel(here("EFM_Summer2022.xlsx"),
sheet = "OSBS_EFM")
bin<-0.5 #0.5 MPa Psi_leaf bins
?read.csv
?read_csv
data<-read.csv(here(test.csv))
data<-read.csv(here('test.csv'))
setwd("~/Documents/r_script_rep/hydraulics")
data<-read.csv(here('test.csv'))
here()
data<-read.csv(here('test.csv'))
here
?here
data<-read.csv('test.csv')
head(data)
data$Species
(acru<-data%>%#create df for Quercus laevis
filter(Species=="ACRU")%>%
select(Psi_lowest, K)%>%#select  psi and K columns
arrange(Psi_lowest)%>%#arrange in increasing order based on the psi
mutate(psi_bin= cut(Psileaf, breaks=c(0, 0.5,1,1.5,2,2.5,3,3.5,max(Psileaf)))))
(acru<-data%>%#create df for Quercus laevis
filter(Species=="ACRU")%>%
select(Psi_lowest, K)%>%#select  psi and K columns
arrange(Psi_lowest)#%>%#arrange in increasing order based on the psi
#mutate(psi_bin= cut(Psileaf, breaks=c(0, 0.5,1,1.5,2,2.5,3,3.5,max(Psileaf)))))
_
acru
(acru<-data%>%#create df for Quercus laevis
filter(Species=="ACRU")%>%
select(Psi_lowest, K)%>%#select  psi and K columns
arrange(Psi_lowest))#%>%#arrange in increasing order based on the psi
?cut
acru_cut<-cut(acru$Psi_lowest,c(0,0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0), include.lowest = TRUE)
acru_cut
View()
View(acru_cut
)
acru_cut
acru$cut<-acru_cut
acru
dim_acru
dim(acur)
dim(acru)
unigue(acru_cut
)
unique(acru_cut)
bins<-unique(acru$cut)
lapply(bins, function(x) { dixon.test(acru%>%filter(cut==x)%>%select(K))})
acru%>%filter(cut==x)%>%select(K)
bins
as.list(bins)
unlist(bins)
b<-as.list(bins)
b
unname(b)
acru%>%filter(cut==x)
bins[[1]]
bins
bins[1]
bins[[1]]
